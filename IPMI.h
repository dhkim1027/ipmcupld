#ifndef __IPMI_H__
#define __IPMI_H__

//#define __DEBUG__

#define TERM_MODE_REQ_MAX_DATA_LEN  25
#define TERM_MODE_RESP_MAX_DATA_LEN 25

#ifdef __WIN32__
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
#endif

#define IPMI_BUF_SIZE 1024
struct ipmi_rq {
	struct {
		uint8_t netfn:6;
		uint8_t lun:2;
		uint8_t cmd;
		uint8_t target_cmd;
		uint16_t data_len;
		uint8_t *data;
	} msg;
};

struct ipmi_rs {
	uint8_t ccode;
	uint8_t data[IPMI_BUF_SIZE];

	/*
	 * Looks like this is the length of the entire packet, including the RMCP
	 * stuff, then modified to be the length of the extra IPMI message data
	 */
	int data_len;

	struct {
		uint8_t netfn;
		uint8_t cmd;
		uint8_t seq;
		uint8_t lun;
	} msg;

	struct {
		uint8_t authtype;
		uint32_t seq;
		uint32_t id;
		uint8_t bEncrypted;	/* IPMI v2 only */
		uint8_t bAuthenticated;	/* IPMI v2 only */
		uint8_t payloadtype;	/* IPMI v2 only */
		/* This is the total length of the payload or
		   IPMI message.  IPMI v2.0 requires this to
		   be 2 bytes.  Not really used for much. */
		uint16_t msglen;
	} session;

	/*
	 * A union of the different possible payload meta-data
	 */
	union {
		struct {
			uint8_t rq_addr;
			uint8_t netfn;
			uint8_t rq_lun;
			uint8_t rs_addr;
			uint8_t rq_seq;
			uint8_t rs_lun;
			uint8_t cmd;
		} ipmi_response;
		struct {
			uint8_t message_tag;
			uint8_t rakp_return_code;
			uint8_t max_priv_level;
			uint32_t console_id;
			uint32_t bmc_id;
			uint8_t auth_alg;
			uint8_t integrity_alg;
			uint8_t crypt_alg;
		} open_session_response;
		struct {
			uint8_t message_tag;
			uint8_t rakp_return_code;
			uint32_t console_id;
			uint8_t bmc_rand[16];	/* Random number generated by the BMC */
			uint8_t bmc_guid[16];
			uint8_t key_exchange_auth_code[20];
		} rakp2_message;
		struct {
			uint8_t message_tag;
			uint8_t rakp_return_code;
			uint32_t console_id;
			uint8_t integrity_check_value[20];
		} rakp4_message;
		struct {
			uint8_t packet_sequence_number;
			uint8_t acked_packet_number;
			uint8_t accepted_character_count;
			uint8_t is_nack;	/* bool */
			uint8_t transfer_unavailable;	/* bool */
			uint8_t sol_inactive;	/* bool */
			uint8_t transmit_overrun;	/* bool */
			uint8_t break_detected;	/* bool */
		} sol_packet;

	} payload;
};


/* generic terminal mode header */
typedef struct ipmi_terminal_mode_hdr {
	uint8_t lun:2,
			netfn:6;
	uint8_t bridge:2,
			seq:6;
	uint8_t command;
} ipmi_terminal_mode_hdr_t;

typedef struct ipmi_terminal_mode_request {
	uint8_t responder_lun:2,
			netfn:6;
	uint8_t bridge:2,
			req_seq:6;
	uint8_t command;
	uint8_t data[TERM_MODE_REQ_MAX_DATA_LEN];
} ipmi_terminal_mode_request_t;

typedef struct ipmi_terminal_mode_response {
	uint8_t   responder_lun:2,
			  netfn:6;
	uint8_t   bridge:2,
			  req_seq:6;
	uint8_t   command;
	uint8_t   completion_code;
	uint8_t   data[TERM_MODE_RESP_MAX_DATA_LEN];
} ipmi_terminal_mode_response_t;

#if 0
typedef struct pkt_hdr {
	uint8_t   lun;
	uint32_t    req_data_len;
	uint32_t    resp_data_len;
	uint32_t    cmd_len;
	uint8_t       netfn;
	uint8_t       responder_lun;
	char        *ws;
} pkt_hdr_t;

typedef struct ipmi_cmd_req {
	uint8_t command;
	uint8_t data;
} ipmi_cmd_req_t;

typedef struct ipmi_cmd_resp {
	uint8_t completion_code;
	uint8_t data;
} ipmi_cmd_resp_t;

typedef struct ipmi_pkt {
	pkt_hdr_t       hdr;
	ipmi_cmd_req_t  *req;
	ipmi_cmd_resp_t *resp;
	void (*xport_completion_function)(void);
} ipmi_pkt_t;
#endif

#define CC_NORMAL       0x00    /* Command Completed Normally. */
#define CC_INVALID_CMD      0xC1    /* Invalid Command. Used to */

/*
 * CC
 * See IPMI specification table 5-2 Generic Completion Codes
 */

#define IPMI_CC_OK                                 0x00
#define IPMI_CC_NODE_BUSY                          0xc0
#define IPMI_CC_INV_CMD                            0xc1
#define IPMI_CC_INV_CMD_FOR_LUN                    0xc2
#define IPMI_CC_TIMEOUT                            0xc3
#define IPMI_CC_OUT_OF_SPACE                       0xc4
#define IPMI_CC_RES_CANCELED                       0xc5
#define IPMI_CC_REQ_DATA_TRUNC                     0xc6
#define IPMI_CC_REQ_DATA_INV_LENGTH                0xc7
#define IPMI_CC_REQ_DATA_FIELD_EXCEED              0xc8
#define IPMI_CC_PARAM_OUT_OF_RANGE                 0xc9
#define IPMI_CC_CANT_RET_NUM_REQ_BYTES             0xca
#define IPMI_CC_REQ_DATA_NOT_PRESENT               0xcb
#define IPMI_CC_INV_DATA_FIELD_IN_REQ              0xcc
#define IPMI_CC_ILL_SENSOR_OR_RECORD               0xcd
#define IPMI_CC_RESP_COULD_NOT_BE_PRV              0xce
#define IPMI_CC_CANT_RESP_DUPLI_REQ                0xcf
#define IPMI_CC_CANT_RESP_SDRR_UPDATE              0xd0
#define IPMI_CC_CANT_RESP_FIRM_UPDATE              0xd1
#define IPMI_CC_CANT_RESP_BMC_INIT                 0xd2
#define IPMI_CC_DESTINATION_UNAVAILABLE            0xd3
#define IPMI_CC_INSUFFICIENT_PRIVILEGES            0xd4
#define IPMI_CC_NOT_SUPPORTED_PRESENT_STATE        0xd5
#define IPMI_CC_ILLEGAL_COMMAND_DISABLED           0xd6
#define IPMI_CC_UNSPECIFIED_ERROR                  0xff

#define IPMI_NETFN_PICMG        0x2C

#define HPMFWUPG_GET_TARGET_UPG_CAPABILITIES 0x2E
#define HPMFWUPG_GET_COMPONENT_PROPERTIES    0x2F
#define HPMFWUPG_ABORT_UPGRADE               0x30
#define HPMFWUPG_INITIATE_UPGRADE_ACTION     0x31
#define HPMFWUPG_UPLOAD_FIRMWARE_BLOCK       0x32
#define HPMFWUPG_FINISH_FIRMWARE_UPLOAD      0x33
#define HPMFWUPG_GET_UPGRADE_STATUS          0x34
#define HPMFWUPG_ACTIVATE_FIRMWARE           0x35
#define HPMFWUPG_QUERY_SELFTEST_RESULT       0x36
#define HPMFWUPG_QUERY_ROLLBACK_STATUS       0x37
#define HPMFWUPG_MANUAL_FIRMWARE_ROLLBACK    0x38




#define NETFN_GROUP_EXTENSION_REQ   0x2C
#define NETFN_GROUP_EXTENSION_RESP  0x2D

#define PICMG_ID        0
/*----------------------------------------------------------------------*/
/*          PICMG Generic Response              */
/*----------------------------------------------------------------------*/
typedef struct picmg_cmd_resp {
	uint8_t completion_code;    /* Completion Code. */
	uint8_t picmg_id;       /* PICMG Identifier. Indicates that
							   this is a PICMGÂ®-defined group
							   extension command. A value of
							   00h shall be used. */
} picmg_cmd_resp_t;

/*----------------------------------------------------------------------*/
/*			Init Upgrade Action											*/
/*----------------------------------------------------------------------*/
#define HPM_INITIATE_UPGRADE_ACTION	0x31

typedef enum eHpmfwupgUpgradeAction
{
	HPM_UPGRADE_ACTION_BACKUP = 0,
	HPM_UPGRADE_ACTION_PREPARE,
	HPM_UPGRADE_ACTION_UPGRADE,
	HPM_UPGRADE_ACTION_COMPARE,
	HPM_UPGRADE_ACTION_INVALID = 0xff
}  tHpmfwupgUpgradeAction_e;

typedef struct initiate_upgrade_action_req{
	uint8_t command;
	uint8_t picmg_id;
	uint8_t components_mask;
	uint8_t upgrade_action;
} initiate_upgrade_action_req_t;

typedef struct initiate_upgrade_action_resp{
	uint8_t completion_code;    /* Completion Code */
	uint8_t picmg_id;
} initiate_upgrade_action_resp_t;

/*----------------------------------------------------------------------*/
/*          Upload Firmware Block                                       */
/*----------------------------------------------------------------------*/
#define HPM_UPLOAD_FIRMWARE_BLOCK   0x32
#define MAX_FW_DATA_LEN 20
typedef struct upload_firmware_block_req{
	uint8_t command;
	uint8_t picmg_id;
	uint8_t block_number;
	uint8_t data[MAX_FW_DATA_LEN];
} upload_firmware_block_req_t;

typedef struct upload_firmware_block_resp{
	uint8_t completion_code;
	uint8_t picmg_id;
	uint8_t section_offset[4];
	uint8_t section_length[4];
} upload_firmware_block_resp_t;

/*----------------------------------------------------------------------*/
/*          Finish Firmware Upload                                      */
/*----------------------------------------------------------------------*/
#define HPM_FINISH_FIRMWARE_UPLOAD      0x33

typedef struct finish_firmware_upload_req{
	uint8_t command;
	uint8_t picmg_id;
	uint8_t component_id;
	uint8_t image_length[4];
} finish_firmware_upload_req_t;

typedef struct finish_firmware_upload_resp{
	uint8_t completion_code;
	uint8_t picmg_id;
} finish_firmware_upload_resp_t;

/*----------------------------------------------------------------------*/
/*          Activate Firmware 											*/
/*----------------------------------------------------------------------*/
#define HPM_ACTIVATE_FIRMWARE           0x35

typedef struct activate_firmware_req {
	uint8_t command;
	uint8_t picmg_id;
	uint8_t rollback_override;
} activate_firmware_req_t ;

typedef struct activate_firmware_resp{
	uint8_t completion_code;
	uint8_t picmg_id;
} activate_firmware_resp_t ;

/*----------------------------------------------------------------------*/
/*          Activate Firmware 											*/
/*----------------------------------------------------------------------*/
#define HPM_QUERY_SELFTEST_RESULT       0x36



void ipmi_process_request( ipmi_pkt_t *pkt );

#endif
